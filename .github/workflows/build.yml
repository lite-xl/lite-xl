name: CI

on:
  push:
    branches:
      - '*'

  pull_request:
    branches:
      - '*'

  workflow_dispatch:

jobs:
  build_linux:
    name: Linux
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        config:
        - { name: "GCC", cc: gcc, cxx: g++ }
        - { name: "clang", cc: clang, cxx: clang++ }
    env:
      CC: ${{ matrix.config.cc }}
      CXX: ${{ matrix.config.cxx }}
    steps:
      - name: Set Environment Variables
        if: ${{ matrix.config.cc == 'gcc' }}
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "INSTALL_REF=${GITHUB_REF##*/}" >> "$GITHUB_ENV"
          echo "INSTALL_NAME=lite-xl-${GITHUB_REF##*/}-linux-$(uname -m)-portable" >> "$GITHUB_ENV"
      - uses: actions/checkout@v2
      - name: Python Setup
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Update Packages
        run: sudo apt-get update
      - name: Install Dependencies
        run: bash scripts/install-dependencies.sh --debug
      - name: Build
        run: |
          bash --version
          bash scripts/build.sh --debug --forcefallback --portable
      - name: Package
        if: ${{ matrix.config.cc == 'gcc' }}
        run: bash scripts/package.sh --version ${INSTALL_REF} --debug --binary
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        if: ${{ matrix.config.cc == 'gcc' }}
        with:
          name: Linux Artifacts
          path: ${{ env.INSTALL_NAME }}.tar.gz

  build_macos:
    name: macOS (x86_64)
    runs-on: macos-11
    env:
      CC: clang
      CXX: clang++
    steps:
      - name: System Information
        run: |
          system_profiler SPSoftwareDataType
          bash --version
          gcc -v
          xcodebuild -version
      - name: Set Environment Variables
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "INSTALL_REF=${GITHUB_REF##*/}" >> "$GITHUB_ENV"
          echo "INSTALL_NAME=lite-xl-${GITHUB_REF##*/}-macos-$(uname -m)" >> "$GITHUB_ENV"
      - uses: actions/checkout@v2
      - name: Python Setup
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Dependencies
        run: bash scripts/install-dependencies.sh --debug
      - name: Build
        run: |
          bash --version
          bash scripts/build.sh --bundle --debug --forcefallback
      - name: Create DMG Image
        run: bash scripts/package.sh --version ${INSTALL_REF} --debug --dmg
      - name: Upload DMG Image
        uses: actions/upload-artifact@v2
        with:
          name: macOS DMG Image
          path: ${{ env.INSTALL_NAME }}.dmg

  build_windows_msys2:
    name: Windows (MINGW)
    runs-on: windows-2019
    strategy:
      matrix:
        msystem: [MINGW32, MINGW64]
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/checkout@v2
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        update: true
        install: >-
          base-devel
          git
          zip
    - name: Set Environment Variables
      run: |
        echo "$HOME/.local/bin" >> "$GITHUB_PATH"
<<<<<<< HEAD
=======
        echo "INSTALL_NAME=lite-xl-${GITHUB_REF##*/}-windows-$MSYSTEM_CARCH" >> "$GITHUB_ENV"
>>>>>>> 0115661 (fix MSYS2 wrong arch in CI)
        echo "INSTALL_REF=${GITHUB_REF##*/}" >> "$GITHUB_ENV"
        if [[ "${MSYSTEM}" == "MINGW64" ]]; then
          echo "INSTALL_NAME=lite-xl-${GITHUB_REF##*/}-windows-x86_64" >> "$GITHUB_ENV"
        else
          echo "INSTALL_NAME=lite-xl-${GITHUB_REF##*/}-windows-i686" >> "$GITHUB_ENV"
        fi
    - name: Install Dependencies
      run: bash scripts/install-dependencies.sh --debug
    - name: Build
      run: |
        bash --version
        bash scripts/build.sh -U --debug --forcefallback
    - name: Package
      run: bash scripts/package.sh --version ${INSTALL_REF} --debug --binary
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Windows Artifacts
<<<<<<< HEAD
        path: ${{ env.INSTALL_NAME }}.zip
=======
        path: |
          LiteXL*.exe
          ${{ env.INSTALL_NAME }}.zip
    - name: Upload Error Logs
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: Error Logs
        path: ${{ env.INSTALL_NAME }}.tar.gz

  build_windows_msvc:
    name: Windows (MSVC)
    runs-on: windows-2019
    strategy:
      matrix:
        arch: [amd64, amd64_x86]
    steps:
      - uses: actions/checkout@v2
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - run: pip install meson ninja
      - name: Configure
        run: meson setup --buildtype=release --wrap-mode=forcefallback build
      - name: Build
        run: ninja -C build


  deploy:
    name: Deployment
    runs-on: ubuntu-18.04
#   if: startsWith(github.ref, 'refs/tags/')
    if: false
    needs:
    - archive_source_code
    - build_linux
    - build_macos
    - build_windows_msys2
    steps:
    - name: Set Environment Variables
      run: echo "INSTALL_REF=${GITHUB_REF##*/}" >> "$GITHUB_ENV"
    - uses: actions/download-artifact@v2
      with:
        name: Linux Artifacts
    - uses: actions/download-artifact@v2
      with:
        name: macOS DMG Image
    - uses: actions/download-artifact@v2
      with:
        name: Source Code Tarball
    - uses: actions/download-artifact@v2
      with:
        name: Windows Artifacts
    - name: Display File Information
      shell: bash
      run: ls -lR
    # Note: not using `actions/create-release@v1`
    #       because it cannot update an existing release
    #       see https://github.com/actions/create-release/issues/29
    - uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.INSTALL_REF }}
        name: Release ${{ env.INSTALL_REF }}
        draft: false
        prerelease: false
        files: |
          lite-xl-${{ env.INSTALL_REF }}-*
          LiteXL*.AppImage
          LiteXL*.exe
>>>>>>> 8b9e22a (add MSVC CI)
