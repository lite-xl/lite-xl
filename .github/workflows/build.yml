name: CI

on:
  push:
    branches:
      - '*'

  pull_request:
    branches:
      - '*'

  workflow_dispatch:

jobs:
  build_linux:
    name: Linux
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        config:
        - { name: "GCC", cc: gcc, cxx: g++ }
        - { name: "clang", cc: clang, cxx: clang++ }
    env:
      CC: ${{ matrix.config.cc }}
      CXX: ${{ matrix.config.cxx }}
    steps:
      - name: Set Environment Variables
        if: ${{ matrix.config.cc == 'gcc' }}
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "INSTALL_REF=${GITHUB_REF##*/}" >> "$GITHUB_ENV"
          echo "INSTALL_NAME=lite-xl-${GITHUB_REF##*/}-linux-$(uname -m)-portable" >> "$GITHUB_ENV"
      - uses: actions/checkout@v3
      - name: Python Setup
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Update Packages
        run: sudo apt-get update
      - name: Install Dependencies
        run: bash scripts/install-dependencies.sh --debug
      - name: Build
        run: |
          bash --version
          bash scripts/build.sh --debug --forcefallback --portable
      - name: Package
        if: ${{ matrix.config.cc == 'gcc' }}
        run: bash scripts/package.sh --version ${INSTALL_REF} --debug --binary
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        if: ${{ matrix.config.cc == 'gcc' }}
        with:
          name: Linux Artifacts
          path: ${{ env.INSTALL_NAME }}.tar.gz

  build_macos:
    name: macOS
    runs-on: macos-11
    env:
      CC: clang
      CXX: clang++
    strategy:
      matrix:
        arch: ['x86_64', 'arm64']
    steps:
      - name: System Information
        run: |
          system_profiler SPSoftwareDataType
          bash --version
          gcc -v
          xcodebuild -version
      - name: Set Environment Variables
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "INSTALL_REF=${GITHUB_REF##*/}" >> "$GITHUB_ENV"
          echo "INSTALL_NAME=lite-xl-${GITHUB_REF##*/}-macos-${{ matrix.arch }}" >> "$GITHUB_ENV"
          if [[ $(uname -m) != ${{ matrix.arch }} ]]; then echo "ARCH=--cross-arch ${{ matrix.arch }}" >> "$GITHUB_ENV"; fi
      - uses: actions/checkout@v3
      - name: Python Setup
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install Dependencies
             # --lhelper will eliminate a warning with arm64 and libusb
        run: bash scripts/install-dependencies.sh --debug --lhelper
      - name: Build
        run: |
          bash --version
          bash scripts/build.sh --bundle --debug --forcefallback $ARCH
      - name: Create DMG Image
        run: bash scripts/package.sh --version ${INSTALL_REF} $ARCH --debug --dmg
      - name: Upload DMG Image
        uses: actions/upload-artifact@v3
        with:
          name: macOS DMG Images
          path: ${{ env.INSTALL_NAME }}.dmg

  build_macos_universal:
    name: macOS (Universal)
    runs-on: macos-11
    needs: build_macos
    steps:
      - name: System Information
        run: |
          system_profiler SPSoftwareDataType
          bash --version
          gcc -v
          xcodebuild -version
      - name: Set Environment Variables
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "INSTALL_NAME=lite-xl-${GITHUB_REF##*/}-macos-universal" >> "$GITHUB_ENV"
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dmgbuild
        run: pip install dmgbuild
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        id: download
        with:
          name: macOS DMG Images
          path: dmgs-original
      - name: Make universal bundles
        run: |
          bash --version
          bash scripts/make-universal-binaries.sh ${{ steps.download.outputs.download-path }} "${INSTALL_NAME}"
      - name: Upload DMG Image
        uses: actions/upload-artifact@v3
        with:
          name: macOS Universal DMG Images
          path: ${{ env.INSTALL_NAME }}.dmg

  build_windows_msys2:
    name: Windows
    runs-on: windows-2019
    strategy:
      matrix:
        config:
          - {msystem: MINGW32, arch: i686}
          - {msystem: MINGW64, arch: x86_64}
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/checkout@v3

    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.config.msystem }}
        release: false
        install: >-
          zip
          wget
          curl
          mingw-w64-${{ matrix.config.arch }}-gcc
          mingw-w64-${{ matrix.config.arch }}-ntldd

    - name: Get Git path from runner
      env:
        MSYS2_PATH_TYPE: inherit # to get git path
      run: echo "GIT_PATH=$(dirname "$(command -v git)")" >> "$GITHUB_ENV"

    - name: Set Environment Variables
      run: |
        echo "INSTALL_REF=${GITHUB_REF##*/}" >> "$GITHUB_ENV"
        echo "INSTALL_NAME=lite-xl-${GITHUB_REF##*/}-windows-${{ matrix.config.arch }}" >> "$GITHUB_ENV"
        # workaround not being able to export paths to $GITHUB_PATH
        echo 'export PATH="$PATH:$HOME/.local/bin:$(cygpath "$USERPROFILE/.local/bin"):$GIT_PATH"' >> ~/.bash_profile

    - uses: actions/setup-python@v4
      id: install-python
      with:
        python-version: '3.11'

    - name: Cache Poetry and other build tools
      id: build-tools
      uses: actions/cache@v3
      with:
        path: ~/.local
        key: build-tools-msys2-${{ runner.os }}-${{ steps.install-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Poetry
      if: steps.build-tools.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
    
    - name: Configure Poetry
      run: poetry config virtualenvs.path "$(cygpath -w "$USERPROFILE/.local/virtualenvs")"

    - name: Install meson, ninja, curl, wget, zip, unzip
      if: steps.build-tools.outputs.cache-hit != 'true'
      run: poetry -C scripts/ci install --no-interaction --no-root

    - name: Install Dependencies
      if: false
      run: bash scripts/install-dependencies.sh --debug

    - name: Build
      run: |
        bash --version
        source "$(poetry -C scripts/ci env info --path)/Scripts/activate"
        bash scripts/build.sh -U --debug --forcefallback

    - name: Package
      run: |
        source "$(poetry -C scripts/ci env info --path)/Scripts/activate"
        bash scripts/package.sh --version ${INSTALL_REF} --debug --binary

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Windows Artifacts
        path: ${{ env.INSTALL_NAME }}.zip

  build_windows_msvc:
    name: Windows (MSVC)
    runs-on: windows-2019
    strategy:
      matrix:
        arch:
          - { target: x86, name: i686 }
          - { target: x64, name: x86_64 }
    defaults:
      run:
        shell: bash
    steps:
      - name: Set up environment variables
        run: |
          echo "$(cygpath -w "$HOME/.local/bin")" >> "$GITHUB_PATH"
          echo "INSTALL_NAME=lite-xl-${GITHUB_REF##*/}-windows-msvc-${{ matrix.arch.name }}" >> "$GITHUB_ENV"
          echo "INSTALL_REF=${GITHUB_REF##*/}" >> "$GITHUB_ENV"
      
      - uses: actions/checkout@v3

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch.target }}

      - name: Workaround MSVC link.exe issue with bash
        run: mv /usr/bin/link /usr/bin/gnu_link

      - uses: actions/setup-python@v4
        id: install-python
        with:
          python-version: '3.11'

      - name: Cache Poetry and other build tools
        id: build-tools
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: build-tools-${{ runner.os }}-${{ steps.install-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry
        if: steps.build-tools.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
      
      - name: Configure Poetry
        run: poetry config virtualenvs.path ~/.local/virtualenvs
      
      - name: Install meson, ninja, curl, wget, zip, unzip
        if: steps.build-tools.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          poetry -C scripts/ci install --no-interaction --no-root
          Invoke-WebRequest -OutFile ~/.local/bin/wget.exe -URI "https://eternallybored.org/misc/wget/1.21.4/64/wget.exe"
          Invoke-WebRequest -OutFile infozip.zip -URI "https://www.willus.com/archive/zip64/infozip_binaries_win64.zip"
          Invoke-WebRequest -OutFile curl.zip -URI "https://curl.se/windows/latest.cgi?p=win64-mingw.zip"
          7z e infozip.zip "-o$env:USERPROFILE/.local/bin" zip.exe unzip.exe
          7z e curl.zip "-o$env:USERPROFILE/.local/bin" -r curl.exe
  
      - name: Build
        run: |
          bash --version
          source "$(poetry -C scripts/ci env info --path)/Scripts/activate"
          bash scripts/build.sh -U --debug --forcefallback

      - name: Package
        run: |
          source "$(poetry -C scripts/ci env info --path)/Scripts/activate"
          bash scripts/package.sh --version ${INSTALL_REF} --debug --binary

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Windows Artifacts (MSVC)
          path: ${{ env.INSTALL_NAME }}.zip
